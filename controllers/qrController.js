const qrcode = require('qrcode');
const fs = require('fs').promises;
const path = require('path');
const Jimp = require('jimp');
const QRCodeReader = require('qrcode-reader');
const QRCodeModel = require('../model/QRCode');
const UserModel = require('../model/User');
const { sendEmail } = require('../services/emailServices');
const messageResponse = require('../Responses/messageRespons');

exports.getUserQRCodes = async (req, res) => {
    try {
        const email = req.email;
        const user = await UserModel.findOne({ email });
        // Fetching the details of QR codes based on id
        const qrCodes = await QRCodeModel.find({ _id: { $in: user.qrCodes } });
        if (qrCodes.length === 0) {
            return res.json(messageResponse.success(200, 'No QR codes have been generated by you.', { qrCodes: [] }));
        }

        // Created an array of objects with ID and data paths
        const qrCodesWithPaths = qrCodes.map(qrCode => ({
            id: qrCode._id,
            data: qrCode.data,
        }));
        res.json(messageResponse.success(200, 'QR codes fetched successfully', { qrCodes: qrCodesWithPaths }));
    } catch (error) {
        console.error(error);
        res.status(500).json(messageResponse.error(500, 'Error fetching QR codes'));
    }
};

exports.generate = async (req, res) => {
    const qrText = req.body.qrText;
    try {
        const userEmail = req.email;
        const user = await UserModel.findOne({ email: userEmail });
        const qrCodeDataURL = await qrcode.toDataURL(qrText);
        const filename = `${Date.now()}.png`;
        const filePath = path.join(__dirname, '..', 'uploads', filename);
        const base64Data = qrCodeDataURL.replace(/^data:image\/png;base64,/, '');
        const imageBuffer = Buffer.from(base64Data, 'base64');
        await fs.writeFile(filePath, imageBuffer);
        const qrCodeData = {
            filename: filename,
            data: filePath,
            userId: req.userId, // Store the user's ID in the QR code data
        };
        const generatedQRCode = await QRCodeModel.create(qrCodeData);
        const qrId = generatedQRCode._id;

        await UserModel.updateOne(
            { _id: req.userId },
            { $push: { qrCodes: qrId } }
        );

        // Creating the array of objects for passing in the sendEmail function
        const qrCodes = [{ filename: qrCodeData.filename, data: qrCodeData.data }];
        await sendEmail(userEmail, qrCodes);

        res.setHeader('Content-Type', 'image/png');
        res.end(imageBuffer);
    } catch (error) {
        console.error(error);
        res.status(500).json(messageResponse.error(500, 'QR code generation failed'));
    }
};

exports.read = async (req, res) => {
    try {
        if (!req.file || !req.file.buffer) {
            return res.status(400).json(messageResponse.error(400, 'No image data found in the request'));
        }
        const buffer = req.file.buffer;
        const user = await UserModel.findById(req.userId);
        const qrcodeReader = new QRCodeReader();
        qrcodeReader.callback = (err, value) => {
            if (err) {
                console.error(err);
                res.status(500).json(messageResponse.error(500, 'Image does not contain a valid QR code'));
                return;
            }
            res.json(messageResponse.success(200, 'QR code read successfully', { result: value.result }));
        };
        const jimpImage = await Jimp.read(buffer);
        qrcodeReader.decode(jimpImage.bitmap);
    } catch (error) {
        console.error(error);
        res.status(500).json(messageResponse.error(500, 'QR code reading failed'));
    }
};
